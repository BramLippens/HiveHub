# HiveHub ‚Äî Movie Collection Management API

A modular NestJS API for managing personal movie collections with clean architecture and built-in extensibility.

## üéØ Overview

HiveHub demonstrates a production-ready, modular architecture inspired by Odoo's design patterns. Built with TypeScript and NestJS, it provides a scalable foundation for managing personal collections.

**Key Highlights:**
- Clean, modular architecture separating business logic from application layers
- Designed for extensibility (future support for books, games, music)
- TypeScript path aliases for maintainable imports
- API versioning (`/api/v1`) following production best practices

## ‚ú® Features (Week 1)

- ‚úÖ RESTful `/api/v1/movies` endpoint with sample data
- ‚úÖ Modular structure with isolated Movies module
- ‚úÖ Global API prefix (`/api/v1`) for consistent versioning
- ‚úÖ TypeScript monorepo setup with path aliases (`@modules/*`)

## üìÅ Project Structure

```
hivehub/
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îÇ       ‚îú‚îÄ‚îÄ src/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ main.ts          # Application entry point
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ app.module.ts    # Root module
‚îÇ       ‚îî‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îî‚îÄ‚îÄ movies/
‚îÇ       ‚îî‚îÄ‚îÄ api/
‚îÇ           ‚îú‚îÄ‚îÄ movies.controller.ts
‚îÇ           ‚îî‚îÄ‚îÄ movies.module.ts
‚îú‚îÄ‚îÄ tsconfig.base.json           # Base TypeScript config
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ .gitignore
```

## üöÄ Getting Started

### Prerequisites

- **Node.js** >= 20
- **pnpm** (recommended) or npm/yarn

### Installation

1. **Clone the repository:**
   ```bash
   git clone <repo-url>
   cd hivehub
   ```

2. **Install dependencies:**
   ```bash
   pnpm install
   ```

### Development

**Run the development server:**
```bash
pnpm ts-node --project apps/api/tsconfig.json -r tsconfig-paths/register apps/api/src/main.ts
```

**API will be available at:**
- Base URL: `http://localhost:3000/api/v1`
- Movies endpoint: `http://localhost:3000/api/v1/movies`

### Production Build

**Compile and run:**
```bash
# Build TypeScript
pnpm tsc -p apps/api
pnpm tsc-alias -p apps/api

# Start production server
node dist/apps/api/src/main.js
```

## üì° API Reference

### Get Movies

```http
GET /api/v1/movies
```

**Response:**
```json
[
  {
    "id": 1,
    "title": "The Matrix",
    "year": 1999
  },
  {
    "id": 2,
    "title": "Inception",
    "year": 2010
  }
]
```

## üó∫Ô∏è Roadmap

**Upcoming Features:**
- [ ] Prisma ORM integration for database persistence
- [ ] User authentication and authorization module
- [ ] Dynamic module loading for multiple collection types
- [ ] Swagger/OpenAPI documentation
- [ ] `/api/v2` endpoints for future API evolution

## üèóÔ∏è Architecture Notes

- **Domain-First Design:** All modules reside in `modules/` for clear separation of concerns
- **API Versioning:** Global prefix `/api/v1` ensures backward compatibility
- **Path Aliases:** TypeScript aliases (`@modules/*`) eliminate relative import complexity
- **Scalability:** Modular structure supports horizontal growth (new collection types, features)

## üìÑ License

MIT ¬© [Your Name]

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

---

**Built with:** NestJS ‚Ä¢ TypeScript ‚Ä¢ pnpm